<?xml version="1.0" encoding="UTF-8"?>
<project name="corbertura.targets">

    <import file="corbertura.properties.xml" />


    <taskdef resource="tasks.properties">
        <classpath>
            <fileset dir="${corbertura.bin}">
                <include name="*.jar" />
            </fileset>
        </classpath>
    </taskdef>
    <taskdef name="saxon-xslt" classname="net.sf.saxon.ant.AntTransform" classpath="${codeline.directory.path}/ThirdParty/AntExtraLibs/saxon9he.jar;${codeline.directory.path}/ThirdParty/AntExtraLibs/saxon9-ant.jar"/>
    <target name="coverage.help">

    </target>

    <target name="coverage.bless" description="Will take all existing coverage failures and enter them as exceptions in the project's coverage.thresholds.xml file.">
        <if>
            <and>
                <istrue value="${coverage.isneeded}"/>
                <exists path="${coverage.classes.report.file}" />
            </and>
            <then>
                <if>
                    <exists path="${coverage.thresholds.file}" />
                    <then>
                        <delete file="${coverage.thresholds.file}"/>
                    </then>
                </if>
                <call target="create.coverage.failure.file"/>
                <if>
                    <exists path="${coverage.failure.file}"/>
                    <then>
                        <saxon-xslt in="${coverage.failure.file}" out="${coverage.thresholds.file}" style="${root.project.directory.path}/build/corbertura/blesscoverage.xsl" force="true"/>
                    </then>
                </if>
                <delete file="${coverage.failure.file}"/>
            </then>
        </if>
    </target>

    <target name="coverage.clean">
        <delete dir="${coverage.report.dir}" failonerror="true" />
    </target>

    <target name="coverage.instrument.classes">
        <if>
            <istrue value="${coverage.isneeded}" />
            <then>
                <mkdir dir="${build.instrumented.classes.dir}" />

                <path id="source.class.files"/>

                <for param="classpath.item">
                    <path refid="instrument.classpath" />
                    <sequential>
                        <var name="classpath.item" value="@{classpath.item}"/>
                        <if>
                            <scriptcondition language="javascript" >
                // import statements
                // importPackage(java.io);
                importClass(java.io.File);
                var thing = new File(project.getProperty("classpath.item"));
                self.setValue(thing.isDirectory());
              </scriptcondition>
                            <then>
                                <addfilesettopath refid="source.class.files">
                                    <fileset dir="${classpath.item}">
                                        <include name="**/*.class"/>
                                    </fileset>
                                </addfilesettopath>
                            </then>
                        </if>
                    </sequential>
                </for>

                <path id="sourcefiles" >
                    <path refid="instrument.classpath" />
                    <path refid="source.class.files"/>
                </path>

                <var unset="true" name="sourcefiles"/>
                <pathconvert targetos="${os.family}" property="sourcefiles" refid="sourcefiles" />

                <outofdate verbose="${debug}" >
                    <sourcefiles>
                        <pathelement path="${sourcefiles}"/>
                    </sourcefiles>
                    <targetfiles path="${build.instrumented.classes.dir}/coverage.instrument.classes.flag"/>
                    <sequential>
                        <delete dir="${build.instrumented.classes.dir}" />
                        <mkdir dir="${build.instrumented.classes.dir}" />
                        <delete dir="${coverage.report.dir}"/>
                        <mkdir dir="${coverage.report.dir}"/>

                        <cobertura-instrument datafile="${coverage.classes.report.file}" todir="${build.instrumented.classes.dir}">
                            <includeClasses regex=".*hhs.*" />

                            <instrumentationClasspath refid="instrument.classpath" />
                        </cobertura-instrument>
                        <echo file="${build.instrumented.classes.dir}/coverage.instrument.classes.flag" append="false"/>
                    </sequential>
                </outofdate>
            </then>
        </if>
    </target>

    <target name="coverage.instrument.package">
        <if>
            <istrue value="${coverage.isneeded}" />
            <then>
                <echo message="check if out of date ${dist.instrumented.file}" level="info"/>

                <mkdir dir="${dist.instrumented.dir}" />

                <if>
                    <exists path="${dist.instrumented.file}" />
                    <then>
                        <property name="force.instrument.package" value="false" />
                    </then>
                    <else>
                        <echo message="Force instrument of package..." />
                        <property name="force.instrument.package" value="true" />
                    </else>
                </if>

                <outofdate verbose="true" force="${force.instrument.package}">
                    <sourcefiles>
                        <filelist dir="${dist.dir}">
                            <file name="${dist.file}" />
                        </filelist>
                    </sourcefiles>
                    <targetfiles>
                        <filelist dir="${dist.instrumented.dir}">
                            <file name="${dist.instrumented.file}" />
                        </filelist>
                    </targetfiles>
                    <sequential>
                        <cobertura-instrument datafile="${coverage.dist.report.file}" todir="${dist.instrumented.dir}">
                            <includeClasses regex=".*hhs.*" />

                            <instrumentationClasspath>
                                <pathelement location="${dist.file}" />
                            </instrumentationClasspath>
                        </cobertura-instrument>
                    </sequential>
                </outofdate>
            </then>
        </if>
    </target>

    <target name="-coverage.write.report">
        <call target="coverage.write.html.report" />
        <call target="coverage.write.xml.report" />
    </target>

    <target name="coverage.write.xml.report">
        <if>
            <exists path="${coverage.classes.report.file}" />
            <then>
                <echo message="Createing XML Coverage Report." />
                <cobertura-report format="xml" datafile="${coverage.classes.report.file}" destdir="${coverage.report.dir}" srcdir="${source.dir}" />
            </then>
        </if>
    </target>

    <target name="coverage.write.html.report"  description="write html coverage reports in this projects directory coverage-reports...">
        <if>
            <exists path="${coverage.classes.report.file}" />
            <then>
                <cobertura-report format="html" datafile="${coverage.classes.report.file}" destdir="${coverage.report.dir}" srcdir="${source.dir}" />
            </then>
        </if>
    </target>

    <target name="-coverage.product.prep">
        <delete file="${root.project.directory.path}/coverage-reports/coverage.check.failure"/>
    </target>

    <target name="-coverage.product.check">
        <if>
            <exists path="${root.project.directory.path}/coverage-reports/coverage.check.failure"/>
            <then>
                <foreach-line file="${root.project.directory.path}/coverage-reports/coverage.check.failure" var="coverage.failing.project.name">
                    <var name="coverage.failing.project.directory" unset="true"/>
                    <var name="coverage.check.failures" unset="true"/>
                    <propertycopy property="coverage.failing.project.directory" from="project.@{coverage.failing.project.name}.directory"/>
                    <loadfile property="coverage.check.failures" srcfile="${coverage.failing.project.directory}/coverage-reports/coverage.failure.xml"/>
                    <echo message="Coverage check failure in ${coverage.failing.project.directory}"/>
                    <echo message="${coverage.check.failures}"/>
                </foreach-line>
                <fail message="Coverage Check failed, please Coverage Summary Report or Ant Report for details."/>
            </then>
        </if>
    </target>

    <target name="-coverage.check.project">
        <if>
            <and>
                <istrue value="${coverage.isneeded}"/>
                <exists path="${coverage.classes.report.file}" />
            </and>
            <then>
                <call target="coverage.write.xml.report" />
                <if>
                    <and>
                        <exists path="${coverage.report.dir}/coverage.xml" />
                    </and>
                    <then>
                        <echo message="Checking Code Coverage Thresholds..." />

                        <if>
                            <istrue value="${called.from.main.build}"/>
                            <then>
                                <mkdir dir="${root.project.directory.path}/coverage-reports"/>
                            </then>
                        </if>

                        <echo message="" file="${coverage.failure.file}" />
                        <trycatch reference="exception">
                            <try>
                                <call target="create.coverage.failure.file"/>

                                <xmltask source="${coverage.failure.file}">
                                    <call path="/thresholds/threshold-error">
                                        <param name="class" path="@class" />
                                        <param name="branchrate" path="@branchrate" />
                                        <param name="linerate" path="@linerate" />
                                        <param name="actualLinerate" path="@actualLineRate" />
                                        <param name="actualBranchrate" path="@actualBrnchRate" />
                                        <actions>
                                            <var name="branchrate" value="@{branchrate}" />
                                            <converttopercent name="branchrate.percent" value="${branchrate}"/>
                                            <var name="linerate" value="@{linerate}" />
                                            <converttopercent name="linerate.percent" value="${linerate}"/>
                                            <var name="class" value="@{class}" />
                                            <var name="actualLineRate" value="@{actualLinerate}" />
                                            <var name="actualBrnchRate" value="@{actualBranchrate}" />
                                            <if>
                                                <compare less="${linerate.percent}" greater="${actualLineRate}" />
                                                <then>
                                                    <property name="coverage.failures" value="true"/>
                                                    <echo message="Project ${project.name}, Class @{class} failed check. Line coverage rate of ${linerate.percent} % is below ${actualLineRate}%."/>
                                                </then>
                                            </if>
                                            <if>
                                                <compare less="${branchrate.percent}" greater="${actualBrnchRate}" />
                                                <then>
                                                    <property name="coverage.failures" value="true"/>
                                                    <echo message="Project ${project.name}, Class @{class} failed check. Branch coverage rate of ${branchrate.percent}% is below ${actualBrnchRate}%."/>
                                                </then>
                                            </if>
                                        </actions>
                                    </call>
                                </xmltask>
                            </try>
                            <catch>
                                <delete file="${coverage.failure.file}"/>
                                <throw refid="exception"/>
                            </catch>
                        </trycatch>

                        <if>
                            <isset property="coverage.failures"/>
                            <then>
                                <if>
                                    <isfalse value="${called.from.main.build}"/>
                                    <then>
                                        <fail message="Coverage Check failed, please Coverage Summary Report or Ant Report for details."/>
                                    </then>
                                    <else>
                                        <echo message="${project.name}${line.separator}" file="${root.project.directory.path}/coverage-reports/coverage.check.failure"/>
                                    </else>
                                </if>
                            </then>
                        </if>
                    </then>
                </if>
            </then>
        </if>

    </target>

    <target name="-coverage.update.failure.file">
        <if>
            <and>
                <istrue value="${coverage.isneeded}"/>
                <exists path="${coverage.classes.report.file}" />
                <exists path="${coverage.report.dir}/coverage.xml" />
            </and>
            <then>
                <if>
                    <istrue value="${called.from.main.build}"/>
                    <then>
                        <mkdir dir="${root.project.directory.path}/coverage-reports"/>
                    </then>
                </if>

                <xmltask source="${coverage.failure.file}">
                    <call path="/thresholds/threshold-error">
                        <param name="class" path="@class" />
                        <actions>
                            <var name="class" value="@{class}" />
                            <property name="coverage.check.failures" value="true"/>
                        </actions>
                    </call>
                </xmltask>

                <if>
                    <isset property="coverage.check.failures"/>
                    <then>
                        <echo level="error" message="Coverage Check:${line.separator}${coverage.check.failures}"/>
                        <if>
                            <isfalse value="${called.from.main.build}"/>
                            <then>
                                <fail message="Coverage Check failed, please Coverage Summary Report or Ant Report for details."/>
                            </then>
                            <else>
                                <echo message="${project.name}${line.separator}" file="${root.project.directory.path}/coverage-reports/coverage.check.failure"/>
                            </else>
                        </if>
                    </then>
                </if>
            </then>
        </if>
    </target>

    <target name="coverage.prepfortests">
        <changeid originial="junitrun.classpath" new="junitrun.classpath.old" />
        <path id="junitrun.classpath">
            <pathelement path="${build.instrumented.classes.dir}" />
            <path refid="junitrun.classpath.old" />
            <fileset dir="${codeline.directory.path}/Build/Packages/Corbertura/bin">
                <include name="cobertura.jar" />
            </fileset>
        </path>
        <mkdir dir="${coverage.report.dir}" />
    </target>

    <target name="create.coverage.failure.file">
        <if>
            <exists path="${coverage.report.file}" />
            <then>
                <xmltask dest="${coverage.report.dir}/coverage.validate.xml">
                    <insert path="/" xml="&lt;root&gt;&lt;/root&gt;"/>
                    <insert path="root" file="${coverage.report.file}"/>
                </xmltask>
            </then>
        </if>
        <if>
            <exists path="${coverage.thresholds.file}" />
            <then>
                <xmltask source="${coverage.report.dir}/coverage.validate.xml"  dest="${coverage.report.dir}/coverage.validate.xml"  outputter="simple:3">
                    <insert path="root" file="${coverage.thresholds.file}" />
                </xmltask>
            </then>
        </if>
        <if>
            <exists path="${coverage.validate.file}" />
            <then>
                <saxon-xslt in="${coverage.validate.file}" out="${coverage.failure.file}" style="${root.project.directory.path}/build/corbertura/coveragecheck.xsl" force="true"/>
            </then>
        </if>
    </target>

</project>